name: CI
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  main:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: nrwl/nx-set-shas@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn install --frozen-lockfile

      - run: npx nx workspace-lint
      - run: npx nx affected --target=lint --parallel=3
      - run: npx nx affected --target=test --parallel=3 --ci --code-coverage
      - run: npx nx affected --target=build --parallel=3
      
      - name: Get branch name
        run: >
          echo "BRANCH_NAME=$(echo ${{ github.head_ref }}
          | awk '{gsub(/[\/_]/, "-", $0); print}' | cut -c -31)" >> $GITHUB_ENV

      - run: npx nx affected --target=deploy --parallel=1
        env:
          SITE_A_SITE_ID: ${{ secrets.SITE_A_SITE_ID }}
          SITE_B_SITE_ID: ${{ secrets.SITE_B_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: Create deploy message
        id: deploy-message
        run: echo "::set-output name=message::$(cat deploy.txt)"

      - name: Comment PR
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Netlify deployed \n\n ${{ steps.deploy-message.outputs.message }}'
            })
