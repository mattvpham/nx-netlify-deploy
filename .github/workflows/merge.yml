name: deploy-staging
on:
  push:
    branches:
      - main

jobs:
  main:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: nrwl/nx-set-shas@v2

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - run: yarn install --frozen-lockfile

      - run: npx nx workspace-lint
      - run: npx nx affected --target=lint --parallel=3
      - run: npx nx affected --target=test --parallel=3 --ci --code-coverage

      # The deploy steps in each project will append their names to deploy.txt
      - name: Create empty deploy.txt
        run: echo -n "" > deploy.txt

      - run: npx nx affected --target=deploy --parallel=1 --alias=staging --configuration=staging
        env:
          SITE_A_SITE_ID: ${{ secrets.SITE_A_SITE_ID }}
          SITE_B_SITE_ID: ${{ secrets.SITE_B_SITE_ID }}
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}

      - name: Create deploy message
        id: deploy-message
        run: |
          sites=$(cat deploy.txt)
          # Support multiline outputs
          sites="${sites//'%'/'%25'}"
          sites="${sites//$'\n'/'%0A'}"
          sites="${sites//$'\r'/'%0D'}"
          echo $sites
          echo "::set-output name=sites::$sites"
